// One day you'll look back and be thankful for not giving up shalini :) " 
// " silver_lining ---> After  cloudy days there are beutiful rainbow sunny  days <3 " 
 
 
#include<bits/stdc++.h>
using namespace std;
typedef long long ll ; 
ll const MOD = 1e9 + 7 ; 
vector < ll > prime ; 
ll pow(ll x,  ll y) 
{ 
    ll res = 1; // Initialize result 
  
    while (y > 0) { 
        // If y is odd, multiply x with result 
        if (y & 1) 
            res = (  ( res % MOD ) * x ) % MOD ; 
  
        // n must be even now 
        y = y >> 1; // y = y/2 
        x = ( ( x % MOD )  * (  x % MOD ) ) ; // Change x to x^2 
    } 
    return res; 
} 

void precal ( ll r )
{
	ll limit = floor ( sqrt ( r ))  + 1 ; 
	bool isPrime [ limit ] ; 
	for ( ll i = 0 ; i < limit  ; i ++ ) 
		isPrime [ i ] = 1 ;
		
	for (  ll i = 2 ;  i * i   < limit  ; i ++ )
	{
		
		
		if ( isPrime [ i ] == 1 )
		{
			//prime .push_back ( i )  ;
			for ( ll j = i * 2  ; j < limit  ; j += i  )
				isPrime [ j ] = 0 ; 
			
		}
	}
	
	for ( ll i = 2 ; i < limit ; i ++ ) 
		if ( isPrime [ i ] ) 
			prime.push_back ( i ) ; 
	
}
 
ll Cal ( ll l , ll r )
{

	ll cnt = 0 ; 
	bool isPrime [ r - l + 1 ] ; 
	for ( ll i = 0 ; i < r - l + 1 ; i ++ ) 
		isPrime [ i ] = 1 ;
		
	for (  ll i = 0 ;  i < prime.size() and prime [ i ] * prime [ i ]  <= r ; i ++ )
	{
		
		ll base = ( l / prime [ i ] ) * prime [ i ] ; 
		if ( base < l ) 
			base += prime [ i ] ; 
			
		
		for ( ll j = base ; j <= r ; j += prime [ i ] )
		{
			isPrime [ j - l  + 1  ] = 0  ; 
		}
		
		if ( prime [ i ] == base ) 
			isPrime [ prime [ i ]  - l + 1 ] = 1 ; 
	}
	
	
	for ( ll i = l  ; i <= r  ; i ++ ) 
		if ( i != 1 and isPrime [ i - l + 1 ] ) 
			cout << i << " " ; 
	return cnt ; 
	
	
}
int main()
{
	ll r  = 1e8  ; 
	precal ( r ) ; 
	
	for ( ll i = 0 ; i < prime .size() ; i ++ ) 
		cout << prime [ i] << " " ; 
	
	cout << endl ; 
	ll T ; 
	cin >> T ; 
	
	while ( T-- )
	{
		ll l , r ; 
		cin  >> l >> r ; 
		cout << Cal ( l , r  )  << endl ;
	}

}           
 
